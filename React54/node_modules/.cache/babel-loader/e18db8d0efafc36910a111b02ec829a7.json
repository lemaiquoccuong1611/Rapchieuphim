{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Desktop\\\\Frontend\\\\React54\\\\src\\\\components\\\\layoutAdmin\\\\TheaterManage\\\\ModalAddDSGhe.jsx\";\nimport React, { Component } from 'react';\nimport { Table, Input, Button, Popconfirm, Form } from \"antd\";\nimport { connect } from 'react-redux';\nimport { themGheAction } from '../../../redux/actions/TheaterSystemManageAction';\nconst EditableContext = /*#__PURE__*/React.createContext();\n\nconst EditableRow = ({\n  form,\n  index,\n  ...props\n}) => /*#__PURE__*/_jsxDEV(EditableContext.Provider, {\n  value: form,\n  children: /*#__PURE__*/_jsxDEV(\"tr\", { ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 10,\n  columnNumber: 5\n}, this);\n\n_c = EditableRow;\nconst EditableFormRow = Form.create()(EditableRow);\n\nclass EditableCell extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      editing: false\n    };\n\n    this.toggleEdit = () => {\n      const editing = !this.state.editing;\n      this.setState({\n        editing\n      }, () => {\n        if (editing) {\n          this.input.focus();\n        }\n      });\n    };\n\n    this.save = e => {\n      const {\n        record,\n        handleSave\n      } = this.props;\n      this.form.validateFields((error, values) => {\n        if (error && error[e.currentTarget.id]) {\n          return;\n        }\n\n        this.toggleEdit();\n        handleSave({ ...record,\n          ...values\n        });\n      });\n    };\n\n    this.renderCell = form => {\n      this.form = form;\n      const {\n        children,\n        dataIndex,\n        record,\n        title\n      } = this.props;\n      const {\n        editing\n      } = this.state;\n      return editing ? /*#__PURE__*/_jsxDEV(Form.Item, {\n        style: {\n          margin: 0\n        },\n        children: form.getFieldDecorator(dataIndex, {\n          rules: [{\n            required: true,\n            message: `${title} is required.`\n          }],\n          initialValue: record[dataIndex]\n        })( /*#__PURE__*/_jsxDEV(Input, {\n          ref: node => this.input = node,\n          onPressEnter: this.save,\n          onBlur: this.save\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editable-cell-value-wrap\",\n        style: {\n          paddingRight: 24\n        },\n        onClick: this.toggleEdit,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this);\n    };\n  }\n\n  render() {\n    const {\n      editable,\n      dataIndex,\n      title,\n      record,\n      index,\n      handleSave,\n      children,\n      ...restProps\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"td\", { ...restProps,\n      children: editable ? /*#__PURE__*/_jsxDEV(EditableContext.Consumer, {\n        children: this.renderCell\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this) : children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nclass ModalAddDSGhe extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDelete = key => {\n      const dataSource = [...this.state.dataSource];\n      this.setState({\n        dataSource: dataSource.filter(item => item.key !== key)\n      });\n    };\n\n    this.handleAdd = () => {\n      const {\n        dataSource\n      } = this.state;\n      let count = this.state.count;\n      const rowLen = dataSource.length;\n\n      if (rowLen > 0) {\n        dataSource.map((itemGhe, i) => {\n          if (rowLen === i + 1) {\n            // last one\n            console.log(itemGhe.key);\n            count = itemGhe.key;\n          } else {// not last one\n          }\n        });\n      } else {\n        count = 'Z';\n      }\n\n      const newData = {\n        key: this.nextChar(count),\n        TenHang: this.nextChar(count),\n        SoLuongGhe: 16\n      };\n      this.setState({\n        dataSource: [...dataSource, newData],\n        count: count\n      });\n      console.log(this.state.dataSource);\n    };\n\n    this.handleSave = row => {\n      const newData = [...this.state.dataSource];\n      const index = newData.findIndex(item => row.key === item.key);\n      const item = newData[index];\n      newData.splice(index, 1, { ...item,\n        ...row\n      });\n      this.setState({\n        dataSource: newData\n      });\n    };\n\n    this.nextChar = c => {\n      var res = c === \"z\" ? \"a\" : c === \"Z\" ? \"A\" : String.fromCharCode(c.charCodeAt(0) + 1);\n      return res;\n    };\n\n    this.handleAddDSGhe = () => {\n      let maRap = this.props.match.params.MaRap;\n      let danhSachGhe = this.state.dataSource;\n      let danhSachGheTemp = [];\n      danhSachGhe.map((ghe, index) => {\n        danhSachGheTemp.push({\n          TenHang: ghe.TenHang,\n          SoLuongGhe: ghe.SoLuongGhe\n        });\n      });\n\n      if (danhSachGheTemp.length > 0) {\n        let objectAddDSGhe = {\n          MaRap: parseInt(maRap),\n          DanhSachGhe: danhSachGheTemp\n        };\n        this.props.themGhe(objectAddDSGhe);\n        console.log(\"objectAddDSGhe\", objectAddDSGhe);\n      }\n    };\n\n    this.columns = [{\n      title: \"HÀNG\",\n      dataIndex: \"TenHang\",\n      width: \"30%\",\n      editable: true,\n      align: 'center'\n    }, {\n      title: \"SỐ GHẾ\",\n      dataIndex: \"SoLuongGhe\",\n      width: \"30%\",\n      editable: true,\n      align: 'center'\n    }, {\n      title: \"Action\",\n      dataIndex: \"operation\",\n      align: 'center',\n      width: \"10%\",\n      render: (text, record) => this.state.dataSource.length >= 1 ? /*#__PURE__*/_jsxDEV(Popconfirm, {\n        title: \"Sure to delete?\",\n        onConfirm: () => this.handleDelete(record.key),\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            margin: '0 auto'\n          },\n          className: \"button__title__icon\",\n          type: \"danger\",\n          icon: \"delete\",\n          size: \"small\",\n          children: \" Delete \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 25\n      }, this) : null\n    }];\n    this.state = {\n      dataSource: [{\n        key: \"A\",\n        TenHang: \"A\",\n        SoLuongGhe: 16\n      }, {\n        key: \"B\",\n        TenHang: \"B\",\n        SoLuongGhe: 16\n      }],\n      count: ''\n    };\n  }\n\n  render() {\n    const {\n      dataSource\n    } = this.state;\n    const components = {\n      body: {\n        row: EditableFormRow,\n        cell: EditableCell\n      }\n    };\n    const columns = this.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n\n      return { ...col,\n        onCell: record => ({\n          record,\n          editable: col.editable,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          handleSave: this.handleSave\n        })\n      };\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          className: \"button__title__icon\",\n          icon: \"plus\",\n          onClick: this.handleAdd,\n          type: \"primary\",\n          style: {\n            marginBottom: 16\n          },\n          children: \"Add a row\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => {\n            this.handleAddDSGhe();\n          },\n          className: \"button__title__icon\",\n          icon: \"database\",\n          style: {\n            marginBottom: 16,\n            marginLeft: 10,\n            backgroundColor: \"orange\",\n            color: '#ffffff'\n          },\n          children: \"Generate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        components: components,\n        rowClassName: () => \"editable-row\",\n        bordered: true,\n        dataSource: dataSource,\n        columns: columns,\n        pagination: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    themGhe: objectAddDSGhe => {\n      dispatch(themGheAction(objectAddDSGhe));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalAddDSGhe);\n\nvar _c;\n\n$RefreshReg$(_c, \"EditableRow\");","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Frontend/React54/src/components/layoutAdmin/TheaterManage/ModalAddDSGhe.jsx"],"names":["React","Component","Table","Input","Button","Popconfirm","Form","connect","themGheAction","EditableContext","createContext","EditableRow","form","index","props","EditableFormRow","create","EditableCell","state","editing","toggleEdit","setState","input","focus","save","e","record","handleSave","validateFields","error","values","currentTarget","id","renderCell","children","dataIndex","title","margin","getFieldDecorator","rules","required","message","initialValue","node","paddingRight","render","editable","restProps","ModalAddDSGhe","constructor","handleDelete","key","dataSource","filter","item","handleAdd","count","rowLen","length","map","itemGhe","i","console","log","newData","nextChar","TenHang","SoLuongGhe","row","findIndex","splice","c","res","String","fromCharCode","charCodeAt","handleAddDSGhe","maRap","match","params","MaRap","danhSachGhe","danhSachGheTemp","ghe","push","objectAddDSGhe","parseInt","DanhSachGhe","themGhe","columns","width","align","text","components","body","cell","col","onCell","marginBottom","marginLeft","backgroundColor","color","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Table, Input, Button, Popconfirm, Form } from \"antd\";\nimport { connect } from 'react-redux';\nimport { themGheAction } from '../../../redux/actions/TheaterSystemManageAction';\n\n\nconst EditableContext = React.createContext();\n\nconst EditableRow = ({ form, index, ...props }) => (\n    <EditableContext.Provider value={form}>\n        <tr {...props} />\n    </EditableContext.Provider>\n);\n\nconst EditableFormRow = Form.create()(EditableRow);\n\nclass EditableCell extends React.Component {\n    state = {\n        editing: false\n    };\n\n    toggleEdit = () => {\n        const editing = !this.state.editing;\n        this.setState({ editing }, () => {\n            if (editing) {\n                this.input.focus();\n            }\n        });\n    };\n\n    save = e => {\n        const { record, handleSave } = this.props;\n        this.form.validateFields((error, values) => {\n            if (error && error[e.currentTarget.id]) {\n                return;\n            }\n            this.toggleEdit();\n            handleSave({ ...record, ...values });\n        });\n    };\n\n    renderCell = form => {\n        this.form = form;\n        const { children, dataIndex, record, title } = this.props;\n        const { editing } = this.state;\n        return editing ? (\n            <Form.Item style={{ margin: 0 }}>\n                {form.getFieldDecorator(dataIndex, {\n                    rules: [\n                        {\n                            required: true,\n                            message: `${title} is required.`\n                        }\n                    ],\n                    initialValue: record[dataIndex]\n                })(\n                    <Input\n                        ref={node => (this.input = node)}\n                        onPressEnter={this.save}\n                        onBlur={this.save}\n                    />\n                )}\n            </Form.Item>\n        ) : (\n                <div\n                    className=\"editable-cell-value-wrap\"\n                    style={{ paddingRight: 24 }}\n                    onClick={this.toggleEdit}\n                >\n                    {children}\n                </div>\n            );\n    };\n\n    render() {\n        const {\n            editable,\n            dataIndex,\n            title,\n            record,\n            index,\n            handleSave,\n            children,\n            ...restProps\n        } = this.props;\n        return (\n            <td {...restProps}>\n                {editable ? (\n                    <EditableContext.Consumer>{this.renderCell}</EditableContext.Consumer>\n                ) : (\n                        children\n                    )}\n            </td>\n        );\n    }\n}\n\nclass ModalAddDSGhe extends Component {\n    constructor(props) {\n        super(props);\n        this.columns = [\n            {\n                title: \"HÀNG\",\n                dataIndex: \"TenHang\",\n                width: \"30%\",\n                editable: true,\n                align: 'center'\n            },\n            {\n                title: \"SỐ GHẾ\",\n                dataIndex: \"SoLuongGhe\",\n                width: \"30%\",\n                editable: true,\n                align: 'center'\n            },\n            {\n                title: \"Action\",\n                dataIndex: \"operation\",\n                align: 'center',\n                width: \"10%\",\n                render: (text, record) =>\n                    this.state.dataSource.length >= 1 ? (\n                        <Popconfirm\n                            title=\"Sure to delete?\"\n                            onConfirm={() => this.handleDelete(record.key)}\n                        >\n                            <Button style={{ margin: '0 auto' }} className=\"button__title__icon\" type=\"danger\" icon=\"delete\" size={\"small\"}> Delete </Button>\n                        </Popconfirm>\n                    ) : null\n            }\n        ];\n\n        this.state = {\n            dataSource: [\n                {\n                    key: \"A\",\n                    TenHang: \"A\",\n                    SoLuongGhe: 16\n                },\n                {\n                    key: \"B\",\n                    TenHang: \"B\",\n                    SoLuongGhe: 16\n                }\n            ],\n            count: ''\n        };\n    }\n\n    handleDelete = key => {\n        const dataSource = [...this.state.dataSource];\n        this.setState({ dataSource: dataSource.filter(item => item.key !== key) });\n    };\n\n    handleAdd = () => {\n        const {  dataSource } = this.state;\n        let count = this.state.count;\n        const rowLen = dataSource.length;\n        if (rowLen > 0){\n            dataSource.map((itemGhe, i) => {\n                if (rowLen === i + 1) {\n                    // last one\n                    console.log(itemGhe.key);                    \n                    count = itemGhe.key;\n                } else {\n                    // not last one\n                }\n            })\n        }\n        else{\n            count = 'Z'\n        }\n        const newData = {\n            key: this.nextChar(count),\n            TenHang: this.nextChar(count),\n            SoLuongGhe: 16\n        };\n        this.setState({\n            dataSource: [...dataSource, newData],\n            count: count\n        });\n        console.log(this.state.dataSource);\n    };\n\n    handleSave = row => {\n        const newData = [...this.state.dataSource];\n        const index = newData.findIndex(item => row.key === item.key);\n        const item = newData[index];\n        newData.splice(index, 1, {\n            ...item,\n            ...row\n        });\n        this.setState({ dataSource: newData });\n    };\n\n    nextChar = c => {\n        var res =\n            c === \"z\"\n                ? \"a\"\n                : c === \"Z\"\n                    ? \"A\"\n                    : String.fromCharCode(c.charCodeAt(0) + 1);\n        return res;\n    };\n\n    // Tạo danh sách ghế\n    handleAddDSGhe = () => {\n        let maRap = this.props.match.params.MaRap;\n        let danhSachGhe = this.state.dataSource;\n        let danhSachGheTemp = [];\n\n        danhSachGhe.map((ghe, index) => {\n            danhSachGheTemp.push({\n                TenHang: ghe.TenHang,\n                SoLuongGhe: ghe.SoLuongGhe\n            })\n        })\n\n        if (danhSachGheTemp.length > 0) {\n            let objectAddDSGhe = {\n                MaRap: parseInt(maRap),\n                DanhSachGhe: danhSachGheTemp\n            }\n            this.props.themGhe(objectAddDSGhe)\n            console.log(\"objectAddDSGhe\", objectAddDSGhe);\n        }\n    }\n\n    render() {\n        const { dataSource } = this.state;\n        const components = {\n            body: {\n                row: EditableFormRow,\n                cell: EditableCell\n            }\n        };\n        const columns = this.columns.map(col => {\n            if (!col.editable) {\n                return col;\n            }\n            return {\n                ...col,\n                onCell: record => ({\n                    record,\n                    editable: col.editable,\n                    dataIndex: col.dataIndex,\n                    title: col.title,\n                    handleSave: this.handleSave\n                })\n            };\n        });\n\n        return (\n            <div >\n                <div className='d-flex'>\n                    <Button\n                        className=\"button__title__icon\"\n                        icon=\"plus\"\n                        onClick={this.handleAdd}\n                        type=\"primary\"\n                        style={{ marginBottom: 16 }}\n                    >\n                        Add a row\n                    </Button>\n                    <Button\n                        onClick={() => {\n                            this.handleAddDSGhe()\n                        }}\n                        className=\"button__title__icon\"\n                        icon=\"database\"\n                        style={{ marginBottom: 16, marginLeft: 10, backgroundColor: \"orange\", color: '#ffffff' }}\n                    >\n                        Generate\n                    </Button>\n                </div>\n                <Table\n                    components={components}\n                    rowClassName={() => \"editable-row\"}\n                    bordered\n                    dataSource={dataSource}\n                    columns={columns}\n                    pagination={false}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        themGhe: (objectAddDSGhe) => {\n            dispatch(themGheAction(objectAddDSGhe))\n        }\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalAddDSGhe)"]},"metadata":{},"sourceType":"module"}